// Mocks generated by Mockito 5.4.4 from annotations
// in simple_task_manager/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i4;
import 'package:flutter/material.dart' as _i9;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:isar/isar.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:simple_task_manager/application_layer/services/network_service.dart'
    as _i3;
import 'package:simple_task_manager/application_layer/services/secure_storage_service.dart'
    as _i17;
import 'package:simple_task_manager/data_layer/models/res/auth/auth_response_model.dart'
    as _i13;
import 'package:simple_task_manager/data_layer/models/res/tasks/todo_response_model.dart'
    as _i16;
import 'package:simple_task_manager/data_layer/models/users/tasks_response_wrapper_model.dart'
    as _i15;
import 'package:simple_task_manager/data_layer/repositories/auth_repo.dart'
    as _i12;
import 'package:simple_task_manager/data_layer/repositories/tasks_repo.dart'
    as _i14;
import 'package:simple_task_manager/data_layer/utils/storing_tasks_util.dart'
    as _i18;
import 'package:stacked_services/stacked_services.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkService_1 extends _i1.SmartFake
    implements _i3.NetworkService {
  _FakeNetworkService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancelToken_2 extends _i1.SmartFake implements _i4.CancelToken {
  _FakeCancelToken_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_3 extends _i1.SmartFake
    implements _i5.FlutterSecureStorage {
  _FakeFlutterSecureStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIsar_4 extends _i1.SmartFake implements _i6.Isar {
  _FakeIsar_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i9.GlobalKey<_i9.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i9.GlobalKey<_i9.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i7.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i7.Transition? transitionClass,
    _i7.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i9.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? navigateToView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i9.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i7.Transition? transition,
    _i7.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearStackAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? clearTillFirstAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);

  @override
  _i10.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i9.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i7.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i7.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.SheetResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<dynamic>?>);

  @override
  _i10.Future<_i7.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i10.Future<_i7.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.SheetResponse<T>?>.value(),
      ) as _i10.Future<_i7.SheetResponse<T>?>);

  @override
  void completeSheet(_i7.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i7.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i7.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i9.Widget Function(
      _i9.BuildContext,
      _i7.DialogRequest<dynamic>,
      dynamic Function(_i7.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i11.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i11.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  _i10.Future<_i7.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i7.DialogResponse<T>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<T>?>);

  @override
  _i10.Future<_i7.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i11.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i11.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i7.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i7.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i7.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i3.NetworkService {
  @override
  _i10.Future<_i2.Either<dynamic, T?>> getRequest<T>(
    String? path, {
    Object? data,
    List<_i4.Interceptor>? interceptors,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
    bool? authorized = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [path],
          {
            #data: data,
            #interceptors: interceptors,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
            #authorized: authorized,
          },
        ),
        returnValue: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #getRequest,
            [path],
            {
              #data: data,
              #interceptors: interceptors,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #getRequest,
            [path],
            {
              #data: data,
              #interceptors: interceptors,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, T?>>);

  @override
  _i10.Future<_i2.Either<dynamic, T?>> postRequest<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    List<_i4.Interceptor>? interceptors,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
    bool? authorized = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #interceptors: interceptors,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
            #authorized: authorized,
          },
        ),
        returnValue: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #postRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #postRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, T?>>);

  @override
  _i10.Future<_i2.Either<dynamic, T?>> patchRequest<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    List<_i4.Interceptor>? interceptors,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
    bool? authorized = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchRequest,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #interceptors: interceptors,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
            #authorized: authorized,
          },
        ),
        returnValue: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #patchRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #patchRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, T?>>);

  @override
  _i10.Future<_i2.Either<dynamic, T?>> deleteRequest<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    List<_i4.Interceptor>? interceptors,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
    bool? authorized = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRequest,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #interceptors: interceptors,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
            #authorized: authorized,
          },
        ),
        returnValue: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #deleteRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i2.Either<dynamic, T?>>.value(
            _FakeEither_0<dynamic, T?>(
          this,
          Invocation.method(
            #deleteRequest,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #interceptors: interceptors,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
              #authorized: authorized,
            },
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, T?>>);
}

/// A class which mocks [AuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepo extends _i1.Mock implements _i12.AuthRepo {
  @override
  _i3.NetworkService get networkService => (super.noSuchMethod(
        Invocation.getter(#networkService),
        returnValue: _FakeNetworkService_1(
          this,
          Invocation.getter(#networkService),
        ),
        returnValueForMissingStub: _FakeNetworkService_1(
          this,
          Invocation.getter(#networkService),
        ),
      ) as _i3.NetworkService);

  @override
  set networkService(_i3.NetworkService? _networkService) => super.noSuchMethod(
        Invocation.setter(
          #networkService,
          _networkService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.CancelToken get cancelToken => (super.noSuchMethod(
        Invocation.getter(#cancelToken),
        returnValue: _FakeCancelToken_2(
          this,
          Invocation.getter(#cancelToken),
        ),
        returnValueForMissingStub: _FakeCancelToken_2(
          this,
          Invocation.getter(#cancelToken),
        ),
      ) as _i4.CancelToken);

  @override
  set cancelToken(_i4.CancelToken? _cancelToken) => super.noSuchMethod(
        Invocation.setter(
          #cancelToken,
          _cancelToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userId(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>> loginUser(
          _i2.Tuple2<String, String>? loginCreds) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [loginCreds],
        ),
        returnValue:
            _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>.value(
                _FakeEither_0<dynamic, _i13.AuthResponseModel>(
          this,
          Invocation.method(
            #loginUser,
            [loginCreds],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>.value(
                _FakeEither_0<dynamic, _i13.AuthResponseModel>(
          this,
          Invocation.method(
            #loginUser,
            [loginCreds],
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>);

  @override
  _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>> registerUser(
          _i2.Tuple2<String, String>? loginCreds) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [loginCreds],
        ),
        returnValue:
            _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>.value(
                _FakeEither_0<dynamic, _i13.AuthResponseModel>(
          this,
          Invocation.method(
            #registerUser,
            [loginCreds],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>.value(
                _FakeEither_0<dynamic, _i13.AuthResponseModel>(
          this,
          Invocation.method(
            #registerUser,
            [loginCreds],
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i13.AuthResponseModel>>);
}

/// A class which mocks [TasksRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepo extends _i1.Mock implements _i14.TasksRepo {
  @override
  _i3.NetworkService get networkService => (super.noSuchMethod(
        Invocation.getter(#networkService),
        returnValue: _FakeNetworkService_1(
          this,
          Invocation.getter(#networkService),
        ),
        returnValueForMissingStub: _FakeNetworkService_1(
          this,
          Invocation.getter(#networkService),
        ),
      ) as _i3.NetworkService);

  @override
  set networkService(_i3.NetworkService? _networkService) => super.noSuchMethod(
        Invocation.setter(
          #networkService,
          _networkService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.CancelToken get cancelToken => (super.noSuchMethod(
        Invocation.getter(#cancelToken),
        returnValue: _FakeCancelToken_2(
          this,
          Invocation.getter(#cancelToken),
        ),
        returnValueForMissingStub: _FakeCancelToken_2(
          this,
          Invocation.getter(#cancelToken),
        ),
      ) as _i4.CancelToken);

  @override
  set cancelToken(_i4.CancelToken? _cancelToken) => super.noSuchMethod(
        Invocation.setter(
          #cancelToken,
          _cancelToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userId(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<
      _i2.Either<dynamic, _i15.TasksResponseWrapperModel>> loadAllTasks({
    int? skip = 0,
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAllTasks,
          [],
          {
            #skip: skip,
            #limit: limit,
          },
        ),
        returnValue: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #loadAllTasks,
            [],
            {
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
        returnValueForMissingStub: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #loadAllTasks,
            [],
            {
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>);

  @override
  _i10.Future<
      _i2.Either<dynamic, _i15.TasksResponseWrapperModel>> createNewTask(
          {required _i16.TodoResponseModel? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewTask,
          [],
          {#todo: todo},
        ),
        returnValue: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #createNewTask,
            [],
            {#todo: todo},
          ),
        )),
        returnValueForMissingStub: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #createNewTask,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>);

  @override
  _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>> updateTask(
          {required _i16.TodoResponseModel? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#todo: todo},
        ),
        returnValue: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#todo: todo},
          ),
        )),
        returnValueForMissingStub: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>);

  @override
  _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>> deleteTask(
          {required int? taskId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskId: taskId},
        ),
        returnValue: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #deleteTask,
            [],
            {#taskId: taskId},
          ),
        )),
        returnValueForMissingStub: _i10
            .Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>.value(
            _FakeEither_0<dynamic, _i15.TasksResponseWrapperModel>(
          this,
          Invocation.method(
            #deleteTask,
            [],
            {#taskId: taskId},
          ),
        )),
      ) as _i10.Future<_i2.Either<dynamic, _i15.TasksResponseWrapperModel>>);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i17.SecureStorageService {
  @override
  _i5.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_3(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_3(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i5.FlutterSecureStorage);
}

/// A class which mocks [StoringTasksUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoringTasksUtil extends _i1.Mock implements _i18.StoringTasksUtil {
  @override
  _i6.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_4(
          this,
          Invocation.getter(#isar),
        ),
        returnValueForMissingStub: _FakeIsar_4(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i6.Isar);

  @override
  set isar(_i6.Isar? _isar) => super.noSuchMethod(
        Invocation.setter(
          #isar,
          _isar,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<dynamic> pullAllTasks(List<_i16.TodoResponseModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #pullAllTasks,
          [tasks],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);

  @override
  _i10.Future<List<_i16.TodoResponseModel>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i10.Future<List<_i16.TodoResponseModel>>.value(
            <_i16.TodoResponseModel>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i16.TodoResponseModel>>.value(
                <_i16.TodoResponseModel>[]),
      ) as _i10.Future<List<_i16.TodoResponseModel>>);

  @override
  _i10.Future<bool> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}
